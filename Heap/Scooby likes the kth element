Scooby likes the kth element
Scooby wants to help you as he knows that you are preparing for interviews. So Scooby gives you a very simple question.
You are given N numbers.  You need to find the kth largest element in the subarray [1 to i] where i varies from 1 to N. In other words you need to find the kth largest element in the sub-arrays [1:1], [1:2], [1:3], ...., [1:n] .
 Input:
1. The first argument given is an integer K.  
2. The second argument given is an array having N integers.  
Output:
Return an array X of size N, where X[i] (1 <= i <= N) will have the kth largest element in the subarray [1 to i].  
If a subarray has less than K elements then A[i] should be -1.  
Constraints:
1 <= N <= 100000  
1 <= K <= N  
Example:
Input:  

    K = 4  
    Array = [1 2 3 4 5 6]  

Output:  

    X = [-1 -1 -1 1 2 3] 
    
    
    
 solution:
 vector<int> Solution::solve(int A, vector<int> &B) {
    vector<int> sol(B.size());
    priority_queue<int,vector<int>,greater<int> > pq;
    for(long long i=0;i<A-1 && i<B.size();i++){sol[i]=-1;pq.push(B[i]);}
    if(A-1<B.size())pq.push(B[A-1]);
    for(long long i=A;i<B.size();i++){
        
        sol[i-1]=pq.top();
        if(B[i]>pq.top()){
            pq.pop();
            pq.push(B[i]);
        }
        
    }
     sol[B.size()-1]=pq.top();
    return sol;
}
