N max pair combinations
Given two arrays A & B of size N each. Find the maximum N elements from the sum combinations (Ai + Bj) formed from elements in array A and B. For example if A = [1,2], B = [3,4], then possible pair sums can be 1+3 = 4 , 1+4=5 , 2+3=5 , 2+4=6 and maximum 2 elements are 6, 5 Example: N = 4 a[]={1,4,2,3} b[]={2,5,1,6}
Maximum 4 elements of combinations sum are
10   (4+6), 
9    (3+6),
9    (4+5),
8    (2+6)

solution:

typedef pair<int,pair<int,int> > pa;
#define mp make_pair
vector<int> Solution::solve(vector<int> &A, vector<int> &B) {
    sort(A.begin(),A.end(),greater<int>());
    sort(B.begin(),B.end(),greater<int>());
    long long n=A.size();
    vector<int> k;
    if(n==0)return k;
    priority_queue<pa> pq;
    pq.push(mp(A[0]+B[0],mp(0,0)));
    set<pair<int,int> > s;
    s.insert(mp(0,0));
    while(k.size()<n){
        pa temp=pq.top();
        pq.pop();
        k.push_back(temp.first);
        int i=temp.second.first;
        int j=temp.second.second;
        if(j+1<n && s.find(mp(i,j+1))==s.end()){
            s.insert(mp(i,j+1));
            pq.push(mp(A[i]+B[j+1],mp(i,j+1)));
        }
        if(i+1<n && s.find(mp(i+1,j))==s.end()){
            s.insert(mp(i+1,j));
            pq.push(mp(A[i+1]+B[j],mp(i+1,j)));
        }
    }
    return k;
    
}
